================================================================================
GETTING STARTED                                                 *java_util.nvim*

`java-util.nvim` aims to provide extra functionality that extend the defaults
of jdtls

Information about specific functionality can be found at: `https://github.com/tobias-z/java-util.nvim`

Or through the helptags

  :h java_util.lsp
  :h java_util.command

test                                                                    *test*
    Defines how the |java_util.lsp.create_test| function should behave when
    called. See
    `https://github.com/tobias-z/java-util.nvim/wiki/Creating-Tests` for in
    depth test configuration

    Fields: ~
        {after_snippet}  (function|nil)  will be called after a test class is
                                         created and snippet has been inserted
        {class_snippets} (table)         A table of snippets that should be
                                         considered when calling the
                                         |java_util.lsp.create_test| function.


java_util.setup({opts})                                    *java_util.setup()*
    The setup function to tailor the experience of java-util to match your
    needs

    The setup function has to be called for java_util to function correctly.

    Default options can be found here:
    `https://github.com/tobias-z/java-util.nvim#configuration`


    Parameters: ~
        {opts} (table|nil)  configuration options

    Fields: ~
        {test} (test|nil)  a |test| table



================================================================================
COMMAND                                                      *java_util.command*

Java Util functions can be run through user commands. These can be quite useful
if you don't want to map everything to a keybind.

Every command is run through `JavaUtil {command}`

Example:
:JavaUtil lsp_rename



================================================================================
LSP                                                              *java_util.lsp*

The Java Util lsp module exposes a collection of functions that extend or
change the functionality of the standard java language server.

The behaviour of a lot of these functions are partly inspired by how IntelliJ
functions.

lsp.rename({new_name}, {opts})                        *java_util.lsp.rename()*
    Rename what you are currently hovering. If you are hovering a field and you
    are using lombok, it will also rename your getters and setters to the
    chosen new name.


    Parameters: ~
        {new_name} (string|nil)  If new_name is passed you will not be
                                 prompted for a new new_name
        {opts}     (table|nil)   options which will be passed to the
                                 |vim.lsp.buf.rename|

    Options: ~
        {filter} (function|nil)  Predicate to filter clients used for rename.
                                 Receives the attached clients as argument and
                                 must return a list of clients.
        {name}   (string|nil)    Restrict clients used for rename to ones
                                 where client.name matches this field.


lsp.create_test({opts})                          *java_util.lsp.create_test()*
    Create a test class for the current class you are in. Uses the
    configuration defined in `test` see |java_util.nvim| for information about
    configuration.

    The function will do one of three things:
      1. No `class_snippet` found in `test.class_snippets`:
        - Create test file and place you there.
        - Execute the `test.after_snippet` function.
      2. A single `class_snippet` found in `test.class_snippets`:
        - Create test file and place you there.
        - Execute the class_snippet.
        - Execute the `test.after_snippet` function.
      3. Multiple `class_snippet`'s' found in `test.class_snippets`:
        - Create prompt to let you choose the snippet that should be used.
        - Create test file and place you there.
        - Execute the chosen class_snippet.
        - Execute the `test.after_snippet` function.


    Parameters: ~
        {opts} (table|nil)  options to specify the create_test behaviour.

    Options: ~
        {class_snippet} (string|nil)  the key of one of your defined
                                      `test.class_snippets`. This will skip
                                      the prompt to select a class_snippet.
        {testname}      (string|nil)  The name of the test you want to create.
                                      This will skip the prompt to select a
                                      testname.


lsp.goto_test({opts})                              *java_util.lsp.goto_test()*
    Bidirectional test movement
    1. If you are in a none test class, it will go to the test of your current
       class. If multiple are found, a prompt is shown for you to choose
    2. If you are in a test class, it will go the the class you testing. If a
       direct match is found, it will take you directly there otherwise, it
       will prompt you with a list of possible matches. An example of a direct
       match would be, you are currently in a class called UserServiceImplTest.
       Here a direct match would be if a class is found called UserServiceImpl


    Parameters: ~
        {opts} (table|nil)  options to specify the goto_test behaviour.

    Options: ~
        {on_no_results} (function|nil)  Called if no results are found. Could
                                        be used to create a test if no class
                                        is found
        {current_class} (string|nil)    Specifies the class used to search for
                                        tests/classes. Default is the current
                                        class you are in. If empty string is
                                        passed, it will show all tests found
                                        from the `opts.cwd`
        {filter}        (function|nil)  Predicate to filter the test results.
                                        Could be used if there are some tests
                                        you always don't want to see.
        {cwd}           (string|nil)    Specifies the cwd you want to search
                                        from. Default is the src root of the
                                        current module or project you are in.



 vim:tw=78:ts=8:ft=help:norl:
